using System;
using System.Collections.Generic;

namespace ProjectEuler
{
    class Program
    {



        static void Main(string[] args)
        {
            /*
                Multiples of 3 or 5
                If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
                The sum of these multiples is 23.
                Find the sum of all the multiples of 3 or 5 below 1000. 
            */
            //MultiplesOf3Or5();

            /*
                Even Finonacci numbers
                Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
                By starting with 1 and 2, the first 10 terms will be:
                1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
                By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
                find the sum of the even-valued terms.
            */
            //EvenFibinacciNumbers();

            /*
                 Largest prime factor
                 The prime factors of 13195 are 5, 7, 13 and 29.
                 What is the largest prime factor of the number 600851475143 ?
            */
            //LargestPrimeFactor();
            LargestPrimeFactor1();

        }

        private static void LargestPrimeFactor1()
        {
            const ulong example = 600851475143;
            ulong example1 = example;
            ulong largest = 0;
            List<ulong> prime = new List<ulong>();
            bool isPrime;

            for (ulong i = 3; i < (ulong)Math.Sqrt(example); i += 2)
            {
                isPrime = true;
                for (ulong i1 = 3; i1 < i; i1 += 2)
                {
                    if (i % i1 == 0)
                    {
                        isPrime = false;
                        break;
                    }
                }

                if (isPrime & example1%i==0)
                {                  
                   if (i > largest) largest = i;
                    while ( example1%i==0)
                    {
                        example1 = example1 / i;
                        Console.WriteLine(i);
                    }
                }

                if (example1 == 1) break;                                              
            }

            Console.WriteLine("the largest prime factor of the number " + example + "= " + largest);
        }

        private static void LargestPrimeFactor()
        {
            const ulong example = 600851475143;
            ulong largest = 0;
            List<ulong> prime = new List<ulong>();
            bool isPrime;
            ulong counter = 0;

            //prime numbers are 2, 3 and futher calculated  
            prime.Add(2);
            prime.Add(3);
            //I only need to check up to the square root(x) of the number(example)
            //example = x*x
            for (ulong i = 5; i < (ulong)Math.Sqrt(example); i+=2)
            {
                isPrime = true;
                for (ulong i1 = 3; i1 < i; i1+=2)
                {
                    if (i % i1 == 0) {
                        isPrime = false;
                        break; 
                    }                     
                }
                if (isPrime) {
                    counter++;
                    Console.WriteLine(counter+" "+i);
                    prime.Add(i); 
                }
            }

            foreach (ulong item in prime)
            {
                if (example % item == 0) largest = item;                              
            }
            Console.WriteLine("the largest prime factor of the number " + example + "= " + largest);
        }

        private static void EvenFibinacciNumbers()
        {
            const int example = 4000000;
            int sum = 0;
            int term1 = 1, term2 = 2, term0=0;
            while (term2 < example)
            {
                if (term2 % 2 == 0) sum += term2;
                term0 = term1;
                term1 = term2;
                term2 = term2 + term0;
            }
            Console.WriteLine("sum of the even-valued terms= " + sum);
        }

        private static void MultiplesOf3Or5()
        {
            const int example = 1000;
            int sum = 0;
            for (int i = 0; i < example; i++)
            {
                if (i % 3 == 0 || i % 5 == 0) sum += i;
            }
            Console.WriteLine("sum of all the multiples of 3 or 5 below 1000= " + sum);
        }
    }
}
